{"version":3,"file":"static/js/349.5c66844d.chunk.js","mappings":"8LAgBA,EAde,kBACb,0BACE,SAAC,KAAD,CACEA,OAAO,MACPC,MAAM,MACNC,MAAM,UACNC,UAAU,gBACVC,aAAc,CAAC,EACfC,aAAa,gBACbC,SAAS,KATA,C,0FCCFC,GAAYC,E,QAAAA,GAAOC,EAAAA,GAAPD,CAAH,yK,SCgBtB,EAhBkB,SAAC,GAAgB,IAAdE,EAAa,EAAbA,OACnBC,QAAQC,IAAIF,GACZ,IAAMG,GAAWC,EAAAA,EAAAA,MACjB,OACE,wBACGJ,EAAOK,KAAI,SAAAC,GAAK,OACf,yBACE,SAACT,EAAD,CAAWU,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAArD,SACGG,EAAMK,gBAAkBL,EAAMM,QAF1BN,EAAME,GADA,KAStB,C,gJCfYK,EAAQf,EAAAA,EAAAA,GAAH,kE,GAKOA,EAAAA,EAAAA,GAAH,8H,QC2BtB,EA5Ba,WACX,OAAoCgB,EAAAA,EAAAA,UAAS,IAA7C,eAAOd,EAAP,KAAee,EAAf,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACRD,GAAa,IAEbE,EAAAA,EAAAA,MACGC,MAAK,SAAAC,GACJN,EAAkBM,EAAKC,QACxB,IACAC,OAAM,SAAAC,GACLA,EAAMA,EAAMC,QACb,IACAC,SAAQ,WACPT,GAAa,EACd,GACJ,GAAE,KAGD,6BACE,SAACJ,EAAD,oCACA,SAACc,EAAA,EAAD,CAAW3B,OAAQA,IAClBgB,IAAa,SAACY,EAAA,EAAD,MAGnB,C,mMC9BKC,EAAW,gCACXC,EAAM,mCAEL,SAAeX,IAAtB,4CAAO,OAAP,oBAAO,6FACCY,EADD,UACUF,EADV,oCAC8CC,GAD9C,kBAIoBE,EAAAA,EAAAA,IAAUD,GAJ9B,cAIGE,EAJH,yBAKIA,EAASZ,MALb,gCAOHpB,QAAQC,IAAR,MAPG,gFAWA,SAAegC,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,gFACCJ,EADD,UACUF,EADV,gCAC0CC,EAD1C,kBACuDK,GADvD,kBAIoBH,EAAAA,EAAAA,IAAUD,GAJ9B,cAIGE,EAJH,yBAKIA,EAASZ,MALb,gCAOHpB,QAAQC,IAAR,MAPG,gFAWA,SAAekC,EAAtB,+CAAO,OAAP,oBAAO,WAAiC5B,GAAjC,gFACCuB,EADD,UACUF,EADV,iBAC2BrB,EAD3B,oBACyCsB,GADzC,kBAIoBE,EAAAA,EAAAA,IAAUD,GAJ9B,cAIGE,EAJH,yBAKIA,EAASZ,MALb,gCAOHpB,QAAQC,IAAR,MAPG,gFAWA,SAAemC,EAAtB,+CAAO,OAAP,oBAAO,WAA8B7B,GAA9B,gFACCuB,EADD,UACUF,EADV,iBAC2BrB,EAD3B,4BACiDsB,GADjD,kBAIoBE,EAAAA,EAAAA,IAAUD,GAJ9B,cAIGE,EAJH,yBAKIA,EAASZ,MALb,gCAOHpB,QAAQC,IAAR,MAPG,gFAWA,SAAeoC,EAAtB,+CAAO,OAAP,oBAAO,WAAiC9B,GAAjC,gFACCuB,EADD,UACUF,EADV,iBAC2BrB,EAD3B,4BACiDsB,GADjD,kBAIoBE,EAAAA,EAAAA,IAAUD,GAJ9B,cAIGE,EAJH,yBAKIA,EAASZ,MALb,gCAOHpB,QAAQC,IAAR,MAPG,gF","sources":["components/Loader/Loader.jsx","components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx","pages/Home/Home.styled.jsx","pages/Home/Home.jsx","services/API.jsx"],"sourcesContent":["import { Audio } from 'react-loader-spinner';\n\nconst Loader = () => (\n  <div>\n    <Audio\n      height=\"100\"\n      width=\"100\"\n      color=\"#4fa94d\"\n      ariaLabel=\"audio-loading\"\n      wrapperStyle={{}}\n      wrapperClass=\"wrapper-class\"\n      visible={true}\n    />\n  </div>\n);\n\nexport default Loader;\n","import { Link } from 'react-router-dom';\nimport styled from '@emotion/styled';\n\nexport const MovieLink = styled(Link)`\n  text-decoration: none;\n  padding: 2px 8px;\n\n  &:hover {\n    border-radius: 5px;\n    box-shadow: 1px 2px 4px 3px rgba(0, 0, 0, 0.5);\n  }\n`;\n","import { useLocation } from 'react-router-dom';\nimport { MovieLink } from './MovieList.styled';\n\nconst MovieList = ({ movies }) => {\n  console.log(movies);\n  const location = useLocation();\n  return (\n    <ul>\n      {movies.map(movie => (\n        <li key={movie.id}>\n          <MovieLink to={`/movies/${movie.id}`} state={{ from: location }}>\n            {movie.original_title || movie.name}\n          </MovieLink>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default MovieList;\n","import styled from '@emotion/styled';\n\nexport const Title = styled.h2`\n  margin-top: 40px;\n  margin-bottom: 0;\n`;\n\nexport const MovieList = styled.ul`\n  padding: 20px 0 20px;\n  margin: 0;\n  display: flex;\n  flex-direction: column;\n  row-gap: 10px;\n`;\n","import { useState, useEffect } from 'react';\nimport { fetchMoviesTrending } from 'services/API';\nimport MovieList from 'components/MovieList';\nimport Loader from 'components/Loader';\nimport { Title } from './Home.styled';\n\nconst Home = () => {\n  const [movies, setMoviesTrending] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    fetchMoviesTrending()\n      .then(data => {\n        setMoviesTrending(data.results);\n      })\n      .catch(error => {\n        error(error.message);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <main>\n      <Title>Top Movies for today</Title>\n      <MovieList movies={movies} />\n      {isLoading && <Loader />}\n    </main>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = '265284652100bb67997703a1d052ae84';\n\nexport async function fetchMoviesTrending() {\n  const url = `${BASE_URL}trending/all/day?api_key=${KEY}`;\n\n  try {\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchMovieByQuery(query) {\n  const url = `${BASE_URL}search/movie?api_key=${KEY}&query=${query}`;\n\n  try {\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchMovieDetails(id) {\n  const url = `${BASE_URL}movie/${id}?api_key=${KEY}`;\n\n  try {\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchMovieCast(id) {\n  const url = `${BASE_URL}movie/${id}/credits?api_key=${KEY}`;\n\n  try {\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchMovieReviews(id) {\n  const url = `${BASE_URL}movie/${id}/reviews?api_key=${KEY}`;\n\n  try {\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n"],"names":["height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","MovieLink","styled","Link","movies","console","log","location","useLocation","map","movie","to","id","state","from","original_title","name","Title","useState","setMoviesTrending","isLoading","setIsLoading","useEffect","fetchMoviesTrending","then","data","results","catch","error","message","finally","MovieList","Loader","BASE_URL","KEY","url","axios","response","fetchMovieByQuery","query","fetchMovieDetails","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}